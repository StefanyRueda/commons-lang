# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: qlty

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
  schedule:
    - cron: "0 7 * * 1"    # semanal (Lunes 07:00 UTC)
  workflow_dispatch: {}

jobs:
  qlty:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    env:
      QLTY_AUTH_TOKEN: ${{ secrets.QLTY_AUTH_TOKEN }}
      MAVEN_OPTS: "-Xmx2g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Fail fast si falta QLTY_AUTH_TOKEN
        run: |
          if [ -z "${QLTY_AUTH_TOKEN}" ]; then
            echo "❌ Falta el secreto QLTY_AUTH_TOKEN en Settings → Secrets → Actions"
            exit 1
          fi

      # Ejecuta tests y genera cobertura JaCoCo (saltamos RAT para evitar fallos por licencias de YAMLs)
      - name: Test + JaCoCo (skip RAT)
        run: |
          mvn -B -Denforcer.skip=true -Drat.skip=true -DskipITs clean test jacoco:report

      # Verifica que el jacoco.xml existe; reintenta generar y muestra diagnóstico si no aparece
      - name: Check jacoco.xml
        run: |
          if [ ! -f target/site/jacoco/jacoco.xml ]; then
            echo "⚠️ No se encontró target/site/jacoco/jacoco.xml; intentando regenerar..."
            mvn -B -Denforcer.skip=true -Drat.skip=true -DskipITs jacoco:report || true
          fi
          if [ ! -f target/site/jacoco/jacoco.xml ]; then
            echo "❌ Sigue faltando jacoco.xml. Contenido de target/site/jacoco:"
            ls -la target/site/jacoco || true
            echo "Consejos: verifica que existan tests; si el proyecto fuese multi-módulo, usa report-aggregate."
            exit 1
          fi

      # Instala Qlty CLI con la acción oficial (evita problemas de DNS con curl)
      - name: Install Qlty CLI
        uses: qltysh/qlty-action/install@v2

      - name: Mostrar versión de Qlty
        run: qlty --version

      # Análisis de métricas (smells, duplicación, complejidad).
      # Importante: no combines '--all' con rutas; usa o '--all' o '.'.
      - name: Run Qlty analysis
        run: qlty metrics --all

      # Publica cobertura JaCoCo en Qlty Cloud
      - name: Publish coverage to Qlty
        run: qlty coverage publish target/site/jacoco/jacoco.xml --format jacoco

      # Artefacto para depuración (opcional)
      - name: Subir jacoco.xml como artefacto
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-xml
          path: target/site/jacoco/jacoco.xml

      # Bloque de diagnóstico si algo falla (no revienta por 'cat' inexistentes)
      - name: Debug en caso de fallo
        if: failure()
        run: |
          echo "PATH=$PATH"
          which qlty || true
          echo "Contenido de target/site/jacoco:"
          ls -la target/site/jacoco || true
          echo "Contenido de target/surefire-reports:"
          if [ -d target/surefire-reports ]; then
            ls -la target/surefire-reports || true
            for f in target/surefire-reports/*; do
              echo "---- $f ----"; (head -n 200 "$f" || true); echo;
            done
          else
            echo "No existe target/surefire-reports"
          fi
