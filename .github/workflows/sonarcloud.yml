name: sonarcloud

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: {}

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0     # necesario para PR decoration

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: sonar-${{ runner.os }}-${{ hashFiles('**/*.xml') }}
          restore-keys: sonar-${{ runner.os }}-

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      # Ejecuta tests y genera jacoco.xml; saltamos RAT para evitar fallos por licencias
      - name: Build & Test (JaCoCo)
        run: |
          mvn -B -Denforcer.skip=true -Drat.skip=true -DskipITs clean test jacoco:report
        env:
          MAVEN_OPTS: "-Xmx2g"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=stefanyrueda
            -Dsonar.projectKey=StefanyRueda_commons-lang
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.java.binaries=target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            -Dsonar.qualitygate.wait=true

      # (Opcional) sube el jacoco.xml como artefacto para depurar
      - name: Upload jacoco.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-xml
          path: target/site/jacoco/jacoco.xml
